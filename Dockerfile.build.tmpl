FROM {{ARCH.images.build_base}} as builder

ENV LANG C.UTF-8
ENV DEBIAN_FRONTEND noninteractive

{{#ARCH.is_amd}}
{{/ARCH.is_amd}}

{{#ARCH.is_arm}}
{{/ARCH.is_arm}}

RUN apt-get update -qy && apt-get install -qy \
RUN apt-get install -qy \
      --no-install-recommends \
      && rm -rf /var/lib/apt/lists/*
      git \
      gpg \
      `# build support` \
      build-essential \
      ca-certificates \
      `# go language` \
      golang \
      `# python language` \
      python-pip \
      `# python3 support` \
      cython3 \
      python3-dev \
      python3-pip \
      setuptools \
      python3-tk \
      `# qt5 support` \
      pyqt5-dev-tools \
      python3-pyqt5 \
      `# libEGL support` \
      libgl1-mesa-dri \
      mesa-utils \
      `# audio support` \
      libpulse0 `# client`\
      pulseaudio `# server`\
      apulse `# fake pulseaudio, use alsa instead`\
      `# video build support` \
      libavdevice-dev \
      libomxil-bellagio-dev libraspberrypi-bin libraspberrypi-doc libraspberrypi-dev raspberrypi-kernel-headers \
      `# usb support` \
      libudev-dev \
      libusb-1.0-0-dev \
      udev \
      `# ssl support` \
      libssl-dev \
      `# editor support` \
      vim \
      `# xdg-open support` \
      xdg-utils \
      `# ppa support` \
      software-properties-common && \
      add-apt-repository ppa:team-xbmc/ppa && \
      `# clean disk` \
      apt -y purge software-properties-common && \
      apt -y --purge autoremove && \

RUN pip3 install --upgrade setuptools pip

RUN pip install {pip_package}

## Download repo
ENV repo_version="1.0.2"
RUN git clone --depth 1 --branch ${repo_version} https://github.com/Genymobile/scrcpy
RUN curl -L https://github.com/user/repo/archive/${repo_version}.tar.gz -o /tmp/repo.tar.gz
RUN curl -L http://downloads.sourceforge.net/project/opencore-amr/fdk-aac/${repo_version}.tar.gz -o /tmp/repo.tar.gz
RUN tar xvf /tmp/repo.tar.gz -C /tmp/
RUN mv /tmp/repo${repo_version} /tmp/repo

RUN curl -L https://github.com/user/repo/archive/master.zip -o /tmp/repo.zip
RUN unzip /tmp/repo.zip -d /tmp/
RUN mv /tmp/repo-master /tmp/repo

WORKDIR /tmp/repo

# Contional run
ARG {turn_on}
RUN if [ "$turn_on" = "true"  ] ; then \
      {do_something}

RUN useradd -m -G sudo app
RUN echo "pi ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/app

# append user to group
RUN usermod -aG plugdev,video,audio app

WORKDIR /home/app

USER app

COPY --from builder /usr/bin/app /user/bin/

COPY tmpl/ /etc/app/tmpl/
COPY --chown=app ./docker-entrypoint.sh /
COPY --chown=app ./app ./
COPY --chown=app ./README.md /

# Configure
RUN mkdir -p .config/sub_folder

COPY --chown=app config.sh /tmp/config.sh
RUN bash /tmp/config.sh

ENTRYPOINT ["/docker-entrypoint.sh"]
CMD ["help"]
